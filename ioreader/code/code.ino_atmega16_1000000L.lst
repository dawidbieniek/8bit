
C:\Users\dawid\AppData\Local\Temp\arduino\sketches\D9EDADF977AA2A92012B73396F25184D/code.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
   0:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__ctors_end>
   4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  18:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <__vector_6>
  1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  24:	0c 94 98 01 	jmp	0x330	; 0x330 <__vector_9>
  28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  48:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>

00000054 <__trampolines_end>:
__trampolines_start():
  54:	00 00       	nop
  56:	39 00       	.word	0x0039	; ????
  58:	36 00       	.word	0x0036	; ????
  5a:	33 00       	.word	0x0033	; ????
  5c:	30 00       	.word	0x0030	; ????

0000005e <digital_pin_to_timer_PGM>:
  5e:	00 00 00 02 00 00 00 00 00 00 00 00 05 04 00 07     ................
	...

0000007e <port_to_output_PGM>:
  7e:	00 00 3b 00 38 00 35 00 32 00                       ..;.8.5.2.

00000088 <port_to_mode_PGM>:
  88:	00 00 3a 00 37 00 34 00 31 00                       ..:.7.4.1.

00000092 <digital_pin_to_port_PGM>:
  92:	02 02 02 02 02 02 02 02 04 04 04 04 04 04 04 04     ................
  a2:	03 03 03 03 03 03 03 03 01 01 01 01 01 01 01 01     ................

000000b2 <digital_pin_to_bit_mask_PGM>:
  b2:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
  c2:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.

000000d2 <__ctors_end>:
__dtors_end():
  d2:	11 24       	eor	r1, r1
  d4:	1f be       	out	0x3f, r1	; 63
  d6:	cf e5       	ldi	r28, 0x5F	; 95
  d8:	d4 e0       	ldi	r29, 0x04	; 4
  da:	de bf       	out	0x3e, r29	; 62
  dc:	cd bf       	out	0x3d, r28	; 61

000000de <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
  de:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
  e0:	a0 e6       	ldi	r26, 0x60	; 96
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
  e2:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
  e4:	e4 e4       	ldi	r30, 0x44	; 68
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
  e6:	f5 e0       	ldi	r31, 0x05	; 5
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
  e8:	02 c0       	rjmp	.+4      	; 0xee <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
  ea:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
  ec:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
  ee:	a0 37       	cpi	r26, 0x70	; 112
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
  f0:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
  f2:	d9 f7       	brne	.-10     	; 0xea <__do_copy_data+0xc>

000000f4 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
  f4:	20 e0       	ldi	r18, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
  f6:	a0 e7       	ldi	r26, 0x70	; 112
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
  f8:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
  fe:	a9 37       	cpi	r26, 0x79	; 121
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
 100:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
.do_clear_bss_start():
 104:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <main>
 108:	0c 94 a0 02 	jmp	0x540	; 0x540 <_exit>

0000010c <__bad_interrupt>:
__vector_1():
 10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <pinMode.constprop.8>:
pinMode.constprop.8():
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:31
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
  uint8_t bit = digitalPinToBitMask(pin);
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	fc 01       	movw	r30, r24
 114:	ee 54       	subi	r30, 0x4E	; 78
 116:	ff 4f       	sbci	r31, 0xFF	; 255
 118:	24 91       	lpm	r18, Z
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
 11a:	8e 56       	subi	r24, 0x6E	; 110
 11c:	9f 4f       	sbci	r25, 0xFF	; 255
 11e:	fc 01       	movw	r30, r24
 120:	84 91       	lpm	r24, Z
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
 122:	88 23       	and	r24, r24
 124:	99 f0       	breq	.+38     	; 0x14c <pinMode.constprop.8+0x3c>
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	fc 01       	movw	r30, r24
 12e:	e8 57       	subi	r30, 0x78	; 120
 130:	ff 4f       	sbci	r31, 0xFF	; 255
 132:	a5 91       	lpm	r26, Z+
 134:	b4 91       	lpm	r27, Z
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
 136:	fc 01       	movw	r30, r24
 138:	e2 58       	subi	r30, 0x82	; 130
 13a:	ff 4f       	sbci	r31, 0xFF	; 255
 13c:	85 91       	lpm	r24, Z+
 13e:	94 91       	lpm	r25, Z
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:54
    cli();
    *reg &= ~bit;
    *out |= bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
 140:	8f b7       	in	r24, 0x3f	; 63
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
 142:	f8 94       	cli
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
 144:	ec 91       	ld	r30, X
 146:	e2 2b       	or	r30, r18
 148:	ec 93       	st	X, r30
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
 14a:	8f bf       	out	0x3f, r24	; 63
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:59
  }
}
 14c:	08 95       	ret

0000014e <digitalWrite>:
digitalWrite():
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:189
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
  uint8_t timer = digitalPinToTimer(pin);
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	fc 01       	movw	r30, r24
 152:	e2 5a       	subi	r30, 0xA2	; 162
 154:	ff 4f       	sbci	r31, 0xFF	; 255
 156:	24 91       	lpm	r18, Z
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
 158:	fc 01       	movw	r30, r24
 15a:	ee 54       	subi	r30, 0x4E	; 78
 15c:	ff 4f       	sbci	r31, 0xFF	; 255
 15e:	34 91       	lpm	r19, Z
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
 160:	fc 01       	movw	r30, r24
 162:	ee 56       	subi	r30, 0x6E	; 110
 164:	ff 4f       	sbci	r31, 0xFF	; 255
 166:	e4 91       	lpm	r30, Z
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
 168:	ee 23       	and	r30, r30
 16a:	c9 f0       	breq	.+50     	; 0x19e <digitalWrite+0x50>
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 16c:	22 23       	and	r18, r18
 16e:	39 f0       	breq	.+14     	; 0x17e <digitalWrite+0x30>
turnOffPWM():
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
 170:	24 30       	cpi	r18, 0x04	; 4
 172:	f1 f0       	breq	.+60     	; 0x1b0 <digitalWrite+0x62>
 174:	a8 f4       	brcc	.+42     	; 0x1a0 <digitalWrite+0x52>
 176:	21 30       	cpi	r18, 0x01	; 1
 178:	11 f1       	breq	.+68     	; 0x1be <digitalWrite+0x70>
 17a:	22 30       	cpi	r18, 0x02	; 2
 17c:	01 f1       	breq	.+64     	; 0x1be <digitalWrite+0x70>
digitalWrite():
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:200

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);

  out = portOutputRegister(port);
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	ee 0f       	add	r30, r30
 182:	ff 1f       	adc	r31, r31
 184:	e2 58       	subi	r30, 0x82	; 130
 186:	ff 4f       	sbci	r31, 0xFF	; 255
 188:	a5 91       	lpm	r26, Z+
 18a:	b4 91       	lpm	r27, Z
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
 18c:	8f b7       	in	r24, 0x3f	; 63
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
 18e:	f8 94       	cli
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
 190:	ec 91       	ld	r30, X
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
 192:	61 11       	cpse	r22, r1
 194:	18 c0       	rjmp	.+48     	; 0x1c6 <digitalWrite+0x78>
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
 196:	30 95       	com	r19
 198:	3e 23       	and	r19, r30
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
 19a:	3c 93       	st	X, r19
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
 19c:	8f bf       	out	0x3f, r24	; 63
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:212
}
 19e:	08 95       	ret
turnOffPWM():
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
 1a0:	25 30       	cpi	r18, 0x05	; 5
 1a2:	51 f0       	breq	.+20     	; 0x1b8 <digitalWrite+0x6a>
 1a4:	27 30       	cpi	r18, 0x07	; 7
 1a6:	59 f7       	brne	.-42     	; 0x17e <digitalWrite+0x30>
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:99
    #endif
    
    // Timer2
    #if defined(TCCR2) && defined(COM21)
      case TIMER2:
        TCCR2 &= ~_BV(COM21);
 1a8:	85 b5       	in	r24, 0x25	; 37
 1aa:	8f 7d       	andi	r24, 0xDF	; 223
 1ac:	85 bd       	out	0x25, r24	; 37
 1ae:	e7 cf       	rjmp	.-50     	; 0x17e <digitalWrite+0x30>
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:82
  switch (timer)
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
 1b0:	8f b5       	in	r24, 0x2f	; 47
 1b2:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
 1b4:	8f bd       	out	0x2f, r24	; 47
 1b6:	e3 cf       	rjmp	.-58     	; 0x17e <digitalWrite+0x30>
 1b8:	8f b5       	in	r24, 0x2f	; 47
 1ba:	8f 7d       	andi	r24, 0xDF	; 223
 1bc:	fb cf       	rjmp	.-10     	; 0x1b4 <digitalWrite+0x66>
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:171
    #if defined(TCCR0) && defined(COM01)
      case TIMER0:
        TCCR0 &= ~_BV(COM01);
        break;
      case TIMER0A:
        TCCR0 &= ~_BV(COM01);
 1be:	83 b7       	in	r24, 0x33	; 51
 1c0:	8f 7d       	andi	r24, 0xDF	; 223
 1c2:	83 bf       	out	0x33, r24	; 51
 1c4:	dc cf       	rjmp	.-72     	; 0x17e <digitalWrite+0x30>
digitalWrite():
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
 1c6:	3e 2b       	or	r19, r30
 1c8:	e8 cf       	rjmp	.-48     	; 0x19a <digitalWrite+0x4c>

000001ca <micros>:
micros():
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
 1ca:	3f b7       	in	r19, 0x3f	; 63
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
 1cc:	f8 94       	cli
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
 1ce:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <timer0_overflow_count>
 1d2:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <timer0_overflow_count+0x1>
 1d6:	a0 91 77 00 	lds	r26, 0x0077	; 0x800077 <timer0_overflow_count+0x2>
 1da:	b0 91 78 00 	lds	r27, 0x0078	; 0x800078 <timer0_overflow_count+0x3>
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
 1de:	22 b7       	in	r18, 0x32	; 50
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:268
    m++;
#else
    q = 1;
#endif
#else
  if ((TIFR & _BV(TOV0)) && (t < 255))
 1e0:	08 b6       	in	r0, 0x38	; 56
 1e2:	00 fe       	sbrs	r0, 0
 1e4:	05 c0       	rjmp	.+10     	; 0x1f0 <micros+0x26>
 1e6:	2f 3f       	cpi	r18, 0xFF	; 255
 1e8:	19 f0       	breq	.+6      	; 0x1f0 <micros+0x26>
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:270
#ifndef CORRECT_EXACT_MICROS
    m++;
 1ea:	01 96       	adiw	r24, 0x01	; 1
 1ec:	a1 1d       	adc	r26, r1
 1ee:	b1 1d       	adc	r27, r1
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
 1f0:	3f bf       	out	0x3f, r19	; 63
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
 1f2:	ba 2f       	mov	r27, r26
 1f4:	a9 2f       	mov	r26, r25
 1f6:	98 2f       	mov	r25, r24
 1f8:	88 27       	eor	r24, r24
 1fa:	bc 01       	movw	r22, r24
 1fc:	cd 01       	movw	r24, r26
 1fe:	62 0f       	add	r22, r18
 200:	71 1d       	adc	r23, r1
 202:	81 1d       	adc	r24, r1
 204:	91 1d       	adc	r25, r1
 206:	46 e0       	ldi	r20, 0x06	; 6
 208:	66 0f       	add	r22, r22
 20a:	77 1f       	adc	r23, r23
 20c:	88 1f       	adc	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	4a 95       	dec	r20
 212:	d1 f7       	brne	.-12     	; 0x208 <micros+0x3e>
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
 214:	08 95       	ret

00000216 <delay>:
delay():
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
 216:	8f 92       	push	r8
 218:	9f 92       	push	r9
 21a:	af 92       	push	r10
 21c:	bf 92       	push	r11
 21e:	cf 92       	push	r12
 220:	df 92       	push	r13
 222:	ef 92       	push	r14
 224:	ff 92       	push	r15
 226:	4b 01       	movw	r8, r22
 228:	5c 01       	movw	r10, r24
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
 22a:	0e 94 e5 00 	call	0x1ca	; 0x1ca <micros>
 22e:	6b 01       	movw	r12, r22
 230:	7c 01       	movw	r14, r24
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:401

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
 232:	0e 94 e5 00 	call	0x1ca	; 0x1ca <micros>
 236:	6c 19       	sub	r22, r12
 238:	7d 09       	sbc	r23, r13
 23a:	8e 09       	sbc	r24, r14
 23c:	9f 09       	sbc	r25, r15
 23e:	68 3e       	cpi	r22, 0xE8	; 232
 240:	73 40       	sbci	r23, 0x03	; 3
 242:	81 05       	cpc	r24, r1
 244:	91 05       	cpc	r25, r1
 246:	a8 f3       	brcs	.-22     	; 0x232 <delay+0x1c>
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:402
      ms--;
 248:	21 e0       	ldi	r18, 0x01	; 1
 24a:	82 1a       	sub	r8, r18
 24c:	91 08       	sbc	r9, r1
 24e:	a1 08       	sbc	r10, r1
 250:	b1 08       	sbc	r11, r1
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:403
      start += 1000UL;
 252:	88 ee       	ldi	r24, 0xE8	; 232
 254:	c8 0e       	add	r12, r24
 256:	83 e0       	ldi	r24, 0x03	; 3
 258:	d8 1e       	adc	r13, r24
 25a:	e1 1c       	adc	r14, r1
 25c:	f1 1c       	adc	r15, r1
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
 25e:	81 14       	cp	r8, r1
 260:	91 04       	cpc	r9, r1
 262:	a1 04       	cpc	r10, r1
 264:	b1 04       	cpc	r11, r1
 266:	29 f7       	brne	.-54     	; 0x232 <delay+0x1c>
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
 268:	ff 90       	pop	r15
 26a:	ef 90       	pop	r14
 26c:	df 90       	pop	r13
 26e:	cf 90       	pop	r12
 270:	bf 90       	pop	r11
 272:	af 90       	pop	r10
 274:	9f 90       	pop	r9
 276:	8f 90       	pop	r8
 278:	08 95       	ret

0000027a <Display::displayDigit(unsigned char, Display::Digit) [clone .constprop.5]>:
_ZN7Display12displayDigitEhNS_5DigitE.constprop.5():
C:\Users\dawid\Desktop\8bit\ioreader\code/Display.cpp:59
  displayDigit(second, Display::Digit::D2);
  displayDigit(third, Display::Digit::D3);
  displayDigit(fourth, Display::Digit::D4);
}

void Display::displayDigit(uint8_t value, Display::Digit digit)
 27a:	0f 93       	push	r16
 27c:	1f 93       	push	r17
 27e:	cf 93       	push	r28
 280:	df 93       	push	r29
 282:	06 2f       	mov	r16, r22
writeDigit():
C:\Users\dawid\Desktop\8bit\ioreader\code/Display.cpp:69
  digitalWrite(static_cast<uint8_t>(digit), LOW);
}

void Display::writeDigit(uint8_t value)
{
  uint8_t map = Display::digitMap[value];
 284:	e8 2f       	mov	r30, r24
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	e0 5a       	subi	r30, 0xA0	; 160
 28a:	ff 4f       	sbci	r31, 0xFF	; 255
 28c:	10 81       	ld	r17, Z
C:\Users\dawid\Desktop\8bit\ioreader\code/Display.cpp:71

  digitalWrite(HEX_A, bitRead(map, 6));
 28e:	c1 2f       	mov	r28, r17
 290:	d0 e0       	ldi	r29, 0x00	; 0
 292:	be 01       	movw	r22, r28
 294:	86 e0       	ldi	r24, 0x06	; 6
 296:	75 95       	asr	r23
 298:	67 95       	ror	r22
 29a:	8a 95       	dec	r24
 29c:	e1 f7       	brne	.-8      	; 0x296 <Display::displayDigit(unsigned char, Display::Digit) [clone .constprop.5]+0x1c>
 29e:	61 70       	andi	r22, 0x01	; 1
 2a0:	8a e0       	ldi	r24, 0x0A	; 10
 2a2:	0e 94 a7 00 	call	0x14e	; 0x14e <digitalWrite>
C:\Users\dawid\Desktop\8bit\ioreader\code/Display.cpp:72
  digitalWrite(HEX_B, bitRead(map, 5));
 2a6:	be 01       	movw	r22, r28
 2a8:	95 e0       	ldi	r25, 0x05	; 5
 2aa:	75 95       	asr	r23
 2ac:	67 95       	ror	r22
 2ae:	9a 95       	dec	r25
 2b0:	e1 f7       	brne	.-8      	; 0x2aa <Display::displayDigit(unsigned char, Display::Digit) [clone .constprop.5]+0x30>
 2b2:	61 70       	andi	r22, 0x01	; 1
 2b4:	8e e0       	ldi	r24, 0x0E	; 14
 2b6:	0e 94 a7 00 	call	0x14e	; 0x14e <digitalWrite>
C:\Users\dawid\Desktop\8bit\ioreader\code/Display.cpp:73
  digitalWrite(HEX_C, bitRead(map, 4));
 2ba:	be 01       	movw	r22, r28
 2bc:	24 e0       	ldi	r18, 0x04	; 4
 2be:	75 95       	asr	r23
 2c0:	67 95       	ror	r22
 2c2:	2a 95       	dec	r18
 2c4:	e1 f7       	brne	.-8      	; 0x2be <Display::displayDigit(unsigned char, Display::Digit) [clone .constprop.5]+0x44>
 2c6:	61 70       	andi	r22, 0x01	; 1
 2c8:	85 e0       	ldi	r24, 0x05	; 5
 2ca:	0e 94 a7 00 	call	0x14e	; 0x14e <digitalWrite>
C:\Users\dawid\Desktop\8bit\ioreader\code/Display.cpp:74
  digitalWrite(HEX_D, bitRead(map, 3));
 2ce:	be 01       	movw	r22, r28
 2d0:	33 e0       	ldi	r19, 0x03	; 3
 2d2:	75 95       	asr	r23
 2d4:	67 95       	ror	r22
 2d6:	3a 95       	dec	r19
 2d8:	e1 f7       	brne	.-8      	; 0x2d2 <Display::displayDigit(unsigned char, Display::Digit) [clone .constprop.5]+0x58>
 2da:	61 70       	andi	r22, 0x01	; 1
 2dc:	83 e0       	ldi	r24, 0x03	; 3
 2de:	0e 94 a7 00 	call	0x14e	; 0x14e <digitalWrite>
C:\Users\dawid\Desktop\8bit\ioreader\code/Display.cpp:75
  digitalWrite(HEX_E, bitRead(map, 2));
 2e2:	be 01       	movw	r22, r28
 2e4:	75 95       	asr	r23
 2e6:	67 95       	ror	r22
 2e8:	75 95       	asr	r23
 2ea:	67 95       	ror	r22
 2ec:	61 70       	andi	r22, 0x01	; 1
 2ee:	82 e0       	ldi	r24, 0x02	; 2
 2f0:	0e 94 a7 00 	call	0x14e	; 0x14e <digitalWrite>
C:\Users\dawid\Desktop\8bit\ioreader\code/Display.cpp:76
  digitalWrite(HEX_F, bitRead(map, 1));
 2f4:	d5 95       	asr	r29
 2f6:	c7 95       	ror	r28
 2f8:	6c 2f       	mov	r22, r28
 2fa:	61 70       	andi	r22, 0x01	; 1
 2fc:	8b e0       	ldi	r24, 0x0B	; 11
 2fe:	0e 94 a7 00 	call	0x14e	; 0x14e <digitalWrite>
C:\Users\dawid\Desktop\8bit\ioreader\code/Display.cpp:77
  digitalWrite(HEX_G, bitRead(map, 0));
 302:	61 2f       	mov	r22, r17
 304:	61 70       	andi	r22, 0x01	; 1
 306:	86 e0       	ldi	r24, 0x06	; 6
 308:	0e 94 a7 00 	call	0x14e	; 0x14e <digitalWrite>
_ZN7Display12displayDigitEhNS_5DigitE.constprop.5():
C:\Users\dawid\Desktop\8bit\ioreader\code/Display.cpp:62
}

void Display::displayDigit(uint8_t value, Display::Digit digit)
{
  Display::writeDigit(value);
  digitalWrite(static_cast<uint8_t>(digit), HIGH);
 30c:	61 e0       	ldi	r22, 0x01	; 1
 30e:	80 2f       	mov	r24, r16
 310:	0e 94 a7 00 	call	0x14e	; 0x14e <digitalWrite>
C:\Users\dawid\Desktop\8bit\ioreader\code/Display.cpp:63
  delay(DIGIT_SHINE_TIME);
 314:	63 e0       	ldi	r22, 0x03	; 3
 316:	70 e0       	ldi	r23, 0x00	; 0
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 0b 01 	call	0x216	; 0x216 <delay>
C:\Users\dawid\Desktop\8bit\ioreader\code/Display.cpp:64
  digitalWrite(static_cast<uint8_t>(digit), LOW);
 320:	60 e0       	ldi	r22, 0x00	; 0
 322:	80 2f       	mov	r24, r16
C:\Users\dawid\Desktop\8bit\ioreader\code/Display.cpp:65
}
 324:	df 91       	pop	r29
 326:	cf 91       	pop	r28
 328:	1f 91       	pop	r17
 32a:	0f 91       	pop	r16
C:\Users\dawid\Desktop\8bit\ioreader\code/Display.cpp:64
void Display::displayDigit(uint8_t value, Display::Digit digit)
{
  Display::writeDigit(value);
  digitalWrite(static_cast<uint8_t>(digit), HIGH);
  delay(DIGIT_SHINE_TIME);
  digitalWrite(static_cast<uint8_t>(digit), LOW);
 32c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <digitalWrite>

00000330 <__vector_9>:
__vector_9():
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 330:	1f 92       	push	r1
 332:	0f 92       	push	r0
 334:	0f b6       	in	r0, 0x3f	; 63
 336:	0f 92       	push	r0
 338:	11 24       	eor	r1, r1
 33a:	2f 93       	push	r18
 33c:	3f 93       	push	r19
 33e:	8f 93       	push	r24
 340:	9f 93       	push	r25
 342:	af 93       	push	r26
 344:	bf 93       	push	r27
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
 346:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <timer0_millis>
 34a:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <timer0_millis+0x1>
 34e:	a0 91 73 00 	lds	r26, 0x0073	; 0x800073 <timer0_millis+0x2>
 352:	b0 91 74 00 	lds	r27, 0x0074	; 0x800074 <timer0_millis+0x3>
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
 356:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <__data_end>
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
 35a:	20 e3       	ldi	r18, 0x30	; 48
 35c:	23 0f       	add	r18, r19
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
 35e:	2d 37       	cpi	r18, 0x7D	; 125
 360:	68 f1       	brcs	.+90     	; 0x3bc <__vector_9+0x8c>
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
 362:	23 eb       	ldi	r18, 0xB3	; 179
 364:	23 0f       	add	r18, r19
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
 366:	41 96       	adiw	r24, 0x11	; 17
 368:	a1 1d       	adc	r26, r1
 36a:	b1 1d       	adc	r27, r1
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
 36c:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <__data_end>
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
 370:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <timer0_millis>
 374:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <timer0_millis+0x1>
 378:	a0 93 73 00 	sts	0x0073, r26	; 0x800073 <timer0_millis+0x2>
 37c:	b0 93 74 00 	sts	0x0074, r27	; 0x800074 <timer0_millis+0x3>
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
 380:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <timer0_overflow_count>
 384:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <timer0_overflow_count+0x1>
 388:	a0 91 77 00 	lds	r26, 0x0077	; 0x800077 <timer0_overflow_count+0x2>
 38c:	b0 91 78 00 	lds	r27, 0x0078	; 0x800078 <timer0_overflow_count+0x3>
 390:	01 96       	adiw	r24, 0x01	; 1
 392:	a1 1d       	adc	r26, r1
 394:	b1 1d       	adc	r27, r1
 396:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <timer0_overflow_count>
 39a:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <timer0_overflow_count+0x1>
 39e:	a0 93 77 00 	sts	0x0077, r26	; 0x800077 <timer0_overflow_count+0x2>
 3a2:	b0 93 78 00 	sts	0x0078, r27	; 0x800078 <timer0_overflow_count+0x3>
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:213
#endif
}
 3a6:	bf 91       	pop	r27
 3a8:	af 91       	pop	r26
 3aa:	9f 91       	pop	r25
 3ac:	8f 91       	pop	r24
 3ae:	3f 91       	pop	r19
 3b0:	2f 91       	pop	r18
 3b2:	0f 90       	pop	r0
 3b4:	0f be       	out	0x3f, r0	; 63
 3b6:	0f 90       	pop	r0
 3b8:	1f 90       	pop	r1
 3ba:	18 95       	reti
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
 3bc:	40 96       	adiw	r24, 0x10	; 16
 3be:	a1 1d       	adc	r26, r1
 3c0:	b1 1d       	adc	r27, r1
 3c2:	d4 cf       	rjmp	.-88     	; 0x36c <__vector_9+0x3c>

000003c4 <__vector_6>:
__vector_6():
C:\Users\dawid\Desktop\8bit\ioreader\code/code.ino:42

  interrupts();
}

ISR(TIMER1_COMPA_vect)
{
 3c4:	1f 92       	push	r1
 3c6:	0f 92       	push	r0
 3c8:	0f b6       	in	r0, 0x3f	; 63
 3ca:	0f 92       	push	r0
 3cc:	11 24       	eor	r1, r1
C:\Users\dawid\Desktop\8bit\ioreader\code/code.ino:60
  //   OCR1A = 1976;
  // }

  // // Enable Output Compare A Match interrupt
  // bitSet(TIMSK, OCIE1A);
}
 3ce:	0f 90       	pop	r0
 3d0:	0f be       	out	0x3f, r0	; 63
 3d2:	0f 90       	pop	r0
 3d4:	1f 90       	pop	r1
 3d6:	18 95       	reti

000003d8 <main>:
main():
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
 3d8:	78 94       	sei
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:966
#if defined(__AVR_ATmega64__) || defined(__AVR_ATmega128__)
  // CPU specific: different values for the ATmega64/128
  TCCR0 |= _BV(WGM01) | _BV(WGM00) | _BV(CS02);
#elif defined(TCCR0) && defined(CS01) && defined(CS00)
  // This combination is for the ATmega8535, ATmega8, ATmega16, ATmega32, ATmega8515, ATmega162
  TCCR0 |= _BV(CS01) | _BV(CS00);
 3da:	83 b7       	in	r24, 0x33	; 51
 3dc:	83 60       	ori	r24, 0x03	; 3
 3de:	83 bf       	out	0x33, r24	; 51
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:968
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
 3e0:	83 b7       	in	r24, 0x33	; 51
 3e2:	88 64       	ori	r24, 0x48	; 72
 3e4:	83 bf       	out	0x33, r24	; 51
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:982
  #error Timer 0 prescale factor 64 not set correctly
#endif

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
 3e6:	89 b7       	in	r24, 0x39	; 57
 3e8:	81 60       	ori	r24, 0x01	; 1
 3ea:	89 bf       	out	0x39, r24	; 57
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
 3ec:	82 e0       	ldi	r24, 0x02	; 2
 3ee:	8e bd       	out	0x2e, r24	; 46
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
 3f0:	8f b5       	in	r24, 0x2f	; 47
 3f2:	81 60       	ori	r24, 0x01	; 1
 3f4:	8f bd       	out	0x2f, r24	; 47
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:1011
#endif

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
 3f6:	85 b5       	in	r24, 0x25	; 37
 3f8:	84 60       	ori	r24, 0x04	; 4
 3fa:	85 bd       	out	0x25, r24	; 37
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:1020
  TCCR2A |= _BV(CS22);
#endif

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
 3fc:	85 b5       	in	r24, 0x25	; 37
 3fe:	80 64       	ori	r24, 0x40	; 64
 400:	85 bd       	out	0x25, r24	; 37
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:1058
  #elif F_CPU >= 4000000 // 4 MHz / 32 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS0) | _BV(ADEN);
  #elif F_CPU >= 2000000 // 2 MHz / 16 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADEN);
  #elif F_CPU >= 1000000 // 1 MHz / 8 = 125 KHz
    ADCSRA = _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
 402:	83 e8       	ldi	r24, 0x83	; 131
 404:	86 b9       	out	0x06, r24	; 6
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:1068

  // The bootloader connects pins 0 and 1 to the USART; disconnect them
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
 406:	1a b8       	out	0x0a, r1	; 10
setup():
C:\Users\dawid\Desktop\8bit\ioreader\code/code.ino:18

const int pulse_pin = PB0;

void setup() 
{
  noInterrupts();
 408:	f8 94       	cli
setupPins():
C:\Users\dawid\Desktop\8bit\ioreader\code/Display.cpp:25
  0B00111000	// F
};

void Display::setupPins()
{
  pinMode(HEX_D1, OUTPUT);
 40a:	89 e0       	ldi	r24, 0x09	; 9
 40c:	0e 94 88 00 	call	0x110	; 0x110 <pinMode.constprop.8>
C:\Users\dawid\Desktop\8bit\ioreader\code/Display.cpp:26
  pinMode(HEX_D2, OUTPUT);
 410:	8c e0       	ldi	r24, 0x0C	; 12
 412:	0e 94 88 00 	call	0x110	; 0x110 <pinMode.constprop.8>
C:\Users\dawid\Desktop\8bit\ioreader\code/Display.cpp:27
  pinMode(HEX_D3, OUTPUT);
 416:	8d e0       	ldi	r24, 0x0D	; 13
 418:	0e 94 88 00 	call	0x110	; 0x110 <pinMode.constprop.8>
C:\Users\dawid\Desktop\8bit\ioreader\code/Display.cpp:28
  pinMode(HEX_D4, OUTPUT);
 41c:	87 e0       	ldi	r24, 0x07	; 7
 41e:	0e 94 88 00 	call	0x110	; 0x110 <pinMode.constprop.8>
C:\Users\dawid\Desktop\8bit\ioreader\code/Display.cpp:29
  pinMode(HEX_A, OUTPUT);
 422:	8a e0       	ldi	r24, 0x0A	; 10
 424:	0e 94 88 00 	call	0x110	; 0x110 <pinMode.constprop.8>
C:\Users\dawid\Desktop\8bit\ioreader\code/Display.cpp:30
  pinMode(HEX_B, OUTPUT);
 428:	8e e0       	ldi	r24, 0x0E	; 14
 42a:	0e 94 88 00 	call	0x110	; 0x110 <pinMode.constprop.8>
C:\Users\dawid\Desktop\8bit\ioreader\code/Display.cpp:31
  pinMode(HEX_C, OUTPUT);
 42e:	85 e0       	ldi	r24, 0x05	; 5
 430:	0e 94 88 00 	call	0x110	; 0x110 <pinMode.constprop.8>
C:\Users\dawid\Desktop\8bit\ioreader\code/Display.cpp:32
  pinMode(HEX_D, OUTPUT);
 434:	83 e0       	ldi	r24, 0x03	; 3
 436:	0e 94 88 00 	call	0x110	; 0x110 <pinMode.constprop.8>
C:\Users\dawid\Desktop\8bit\ioreader\code/Display.cpp:33
  pinMode(HEX_E, OUTPUT);
 43a:	82 e0       	ldi	r24, 0x02	; 2
 43c:	0e 94 88 00 	call	0x110	; 0x110 <pinMode.constprop.8>
C:\Users\dawid\Desktop\8bit\ioreader\code/Display.cpp:34
  pinMode(HEX_F, OUTPUT);
 440:	8b e0       	ldi	r24, 0x0B	; 11
 442:	0e 94 88 00 	call	0x110	; 0x110 <pinMode.constprop.8>
C:\Users\dawid\Desktop\8bit\ioreader\code/Display.cpp:35
  pinMode(HEX_G, OUTPUT);
 446:	86 e0       	ldi	r24, 0x06	; 6
 448:	0e 94 88 00 	call	0x110	; 0x110 <pinMode.constprop.8>
C:\Users\dawid\Desktop\8bit\ioreader\code/Display.cpp:36
  pinMode(HEX_DP, OUTPUT);
 44c:	84 e0       	ldi	r24, 0x04	; 4
 44e:	0e 94 88 00 	call	0x110	; 0x110 <pinMode.constprop.8>
C:\Users\dawid\Desktop\8bit\ioreader\code/Display.cpp:38

  digitalWrite(HEX_D1, LOW);
 452:	60 e0       	ldi	r22, 0x00	; 0
 454:	89 e0       	ldi	r24, 0x09	; 9
 456:	0e 94 a7 00 	call	0x14e	; 0x14e <digitalWrite>
C:\Users\dawid\Desktop\8bit\ioreader\code/Display.cpp:39
  digitalWrite(HEX_D2, LOW);
 45a:	60 e0       	ldi	r22, 0x00	; 0
 45c:	8c e0       	ldi	r24, 0x0C	; 12
 45e:	0e 94 a7 00 	call	0x14e	; 0x14e <digitalWrite>
C:\Users\dawid\Desktop\8bit\ioreader\code/Display.cpp:40
  digitalWrite(HEX_D3, LOW);
 462:	60 e0       	ldi	r22, 0x00	; 0
 464:	8d e0       	ldi	r24, 0x0D	; 13
 466:	0e 94 a7 00 	call	0x14e	; 0x14e <digitalWrite>
C:\Users\dawid\Desktop\8bit\ioreader\code/Display.cpp:41
  digitalWrite(HEX_D4, LOW);
 46a:	60 e0       	ldi	r22, 0x00	; 0
 46c:	87 e0       	ldi	r24, 0x07	; 7
 46e:	0e 94 a7 00 	call	0x14e	; 0x14e <digitalWrite>
C:\Users\dawid\Desktop\8bit\ioreader\code/Display.cpp:43

  digitalWrite(HEX_DP, HIGH); // Turn off DP
 472:	61 e0       	ldi	r22, 0x01	; 1
 474:	84 e0       	ldi	r24, 0x04	; 4
 476:	0e 94 a7 00 	call	0x14e	; 0x14e <digitalWrite>
portMode():
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_extras.h:47
    {
      *portModeRegister(PORT) = 0x00;
      *portOutputRegister(PORT) = 0xff;
    }  
    else // INPUT
      *portModeRegister(PORT) = 0x00;
 47a:	ea e8       	ldi	r30, 0x8A	; 138
 47c:	f0 e0       	ldi	r31, 0x00	; 0
 47e:	a5 91       	lpm	r26, Z+
 480:	b4 91       	lpm	r27, Z
 482:	1c 92       	st	X, r1
 484:	ee e8       	ldi	r30, 0x8E	; 142
 486:	f0 e0       	ldi	r31, 0x00	; 0
 488:	a5 91       	lpm	r26, Z+
 48a:	b4 91       	lpm	r27, Z
 48c:	1c 92       	st	X, r1
setup():
C:\Users\dawid\Desktop\8bit\ioreader\code/code.ino:24

  hexDisplay.setupPins();
  input.setupPins();

  // Set pulse pin
  bitSet(DDRB, pulse_pin);
 48e:	b8 9a       	sbi	0x17, 0	; 23
C:\Users\dawid\Desktop\8bit\ioreader\code/code.ino:25
  bitSet(PORTB, pulse_pin);
 490:	c0 9a       	sbi	0x18, 0	; 24
C:\Users\dawid\Desktop\8bit\ioreader\code/code.ino:27
  // Setup timer1 control
  bitSet(TCCR1B, WGM12);
 492:	8e b5       	in	r24, 0x2e	; 46
 494:	88 60       	ori	r24, 0x08	; 8
 496:	8e bd       	out	0x2e, r24	; 46
C:\Users\dawid\Desktop\8bit\ioreader\code/code.ino:29
  // bitSet(TCCR1B, CS12);
  bitSet(TCCR1B, CS10);
 498:	8e b5       	in	r24, 0x2e	; 46
 49a:	81 60       	ori	r24, 0x01	; 1
 49c:	8e bd       	out	0x2e, r24	; 46
C:\Users\dawid\Desktop\8bit\ioreader\code/code.ino:30
  bitSet(TCCR1B, CS11);
 49e:	8e b5       	in	r24, 0x2e	; 46
 4a0:	82 60       	ori	r24, 0x02	; 2
 4a2:	8e bd       	out	0x2e, r24	; 46
C:\Users\dawid\Desktop\8bit\ioreader\code/code.ino:32
  // Enable compare A
  OCR1A = 11976;
 4a4:	88 ec       	ldi	r24, 0xC8	; 200
 4a6:	9e e2       	ldi	r25, 0x2E	; 46
 4a8:	9b bd       	out	0x2b, r25	; 43
 4aa:	8a bd       	out	0x2a, r24	; 42
C:\Users\dawid\Desktop\8bit\ioreader\code/code.ino:33
  bitSet(TIMSK, OCIE1A);
 4ac:	89 b7       	in	r24, 0x39	; 57
 4ae:	80 61       	ori	r24, 0x10	; 16
 4b0:	89 bf       	out	0x39, r24	; 57
C:\Users\dawid\Desktop\8bit\ioreader\code/code.ino:36

  // Enable interrupt in mask
  bitSet(TIMSK, OCIE1A);
 4b2:	89 b7       	in	r24, 0x39	; 57
 4b4:	80 61       	ori	r24, 0x10	; 16
 4b6:	89 bf       	out	0x39, r24	; 57
C:\Users\dawid\Desktop\8bit\ioreader\code/code.ino:38

  interrupts();
 4b8:	78 94       	sei
portRead():
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_extras.h:57
static inline uint8_t portRead(uint8_t) __attribute__((always_inline, unused));
static inline uint8_t portRead(uint8_t PORT)
{  
  PORT++;
  if(__builtin_constant_p(PORT))
    return *(portInputRegister(PORT));
 4ba:	36 e5       	ldi	r19, 0x56	; 86
 4bc:	e3 2e       	mov	r14, r19
 4be:	30 e0       	ldi	r19, 0x00	; 0
 4c0:	f3 2e       	mov	r15, r19
 4c2:	0a e5       	ldi	r16, 0x5A	; 90
 4c4:	10 e0       	ldi	r17, 0x00	; 0
main():
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/main.cpp:47
  
  setup();
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
 4c6:	40 e0       	ldi	r20, 0x00	; 0
 4c8:	c4 2e       	mov	r12, r20
 4ca:	40 e0       	ldi	r20, 0x00	; 0
 4cc:	d4 2e       	mov	r13, r20
portRead():
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_extras.h:57
 4ce:	f7 01       	movw	r30, r14
 4d0:	a5 91       	lpm	r26, Z+
 4d2:	b4 91       	lpm	r27, Z
 4d4:	9c 91       	ld	r25, X
 4d6:	88 e0       	ldi	r24, 0x08	; 8
main():
C:\Users\dawid\Desktop\8bit\ioreader\code/Input.cpp:6
#include "wiring_extras.h"
#include "Input.h"

static uint8_t Input::rotateBits(uint8_t byte)
{
  uint8_t result = 0;
 4d8:	c0 e0       	ldi	r28, 0x00	; 0
rotateBits():
C:\Users\dawid\Desktop\8bit\ioreader\code/Input.cpp:9
  for (uint8_t i = 0; i < 8; i++) 
  {
    result = (result << 1) | (byte & 1);
 4da:	cc 0f       	add	r28, r28
 4dc:	29 2f       	mov	r18, r25
 4de:	21 70       	andi	r18, 0x01	; 1
 4e0:	c2 2b       	or	r28, r18
C:\Users\dawid\Desktop\8bit\ioreader\code/Input.cpp:10
    byte >>= 1;
 4e2:	96 95       	lsr	r25
 4e4:	81 50       	subi	r24, 0x01	; 1
C:\Users\dawid\Desktop\8bit\ioreader\code/Input.cpp:7
#include "Input.h"

static uint8_t Input::rotateBits(uint8_t byte)
{
  uint8_t result = 0;
  for (uint8_t i = 0; i < 8; i++) 
 4e6:	c9 f7       	brne	.-14     	; 0x4da <__stack+0x7b>
portRead():
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_extras.h:57
 4e8:	f8 01       	movw	r30, r16
 4ea:	a5 91       	lpm	r26, Z+
 4ec:	b4 91       	lpm	r27, Z
 4ee:	8c 91       	ld	r24, X
readInput():
C:\Users\dawid\Desktop\8bit\ioreader\code/Input.cpp:33
  return portRead(INPUT_B);
}

uint16_t Input::readInput()
{
  return (static_cast<uint16_t>(readInputA()) << 8) | readInputB();
 4f0:	dc 2f       	mov	r29, r28
 4f2:	c8 2f       	mov	r28, r24
displayNumber():
C:\Users\dawid\Desktop\8bit\ioreader\code/Display.cpp:53
  uint8_t first = (value & 0xF000) >> 12;
  uint8_t second = (value & 0x0F00) >> 8;
  uint8_t third = (value & 0x00F0) >> 4;
  uint8_t fourth = value & 0x000F;

  displayDigit(first, Display::Digit::D1);
 4f4:	69 e0       	ldi	r22, 0x09	; 9
 4f6:	8d 2f       	mov	r24, r29
 4f8:	82 95       	swap	r24
 4fa:	8f 70       	andi	r24, 0x0F	; 15
 4fc:	0e 94 3d 01 	call	0x27a	; 0x27a <Display::displayDigit(unsigned char, Display::Digit) [clone .constprop.5]>
C:\Users\dawid\Desktop\8bit\ioreader\code/Display.cpp:54
  displayDigit(second, Display::Digit::D2);
 500:	6c e0       	ldi	r22, 0x0C	; 12
 502:	8d 2f       	mov	r24, r29
 504:	8f 70       	andi	r24, 0x0F	; 15
 506:	0e 94 3d 01 	call	0x27a	; 0x27a <Display::displayDigit(unsigned char, Display::Digit) [clone .constprop.5]>
C:\Users\dawid\Desktop\8bit\ioreader\code/Display.cpp:50

void Display::displayNumber(uint16_t value)
{
  uint8_t first = (value & 0xF000) >> 12;
  uint8_t second = (value & 0x0F00) >> 8;
  uint8_t third = (value & 0x00F0) >> 4;
 50a:	ce 01       	movw	r24, r28
 50c:	24 e0       	ldi	r18, 0x04	; 4
 50e:	96 95       	lsr	r25
 510:	87 95       	ror	r24
 512:	2a 95       	dec	r18
 514:	e1 f7       	brne	.-8      	; 0x50e <__stack+0xaf>
C:\Users\dawid\Desktop\8bit\ioreader\code/Display.cpp:55
  uint8_t fourth = value & 0x000F;

  displayDigit(first, Display::Digit::D1);
  displayDigit(second, Display::Digit::D2);
  displayDigit(third, Display::Digit::D3);
 516:	6d e0       	ldi	r22, 0x0D	; 13
 518:	8f 70       	andi	r24, 0x0F	; 15
 51a:	0e 94 3d 01 	call	0x27a	; 0x27a <Display::displayDigit(unsigned char, Display::Digit) [clone .constprop.5]>
C:\Users\dawid\Desktop\8bit\ioreader\code/Display.cpp:56
  displayDigit(fourth, Display::Digit::D4);
 51e:	67 e0       	ldi	r22, 0x07	; 7
 520:	8c 2f       	mov	r24, r28
 522:	8f 70       	andi	r24, 0x0F	; 15
 524:	0e 94 3d 01 	call	0x27a	; 0x27a <Display::displayDigit(unsigned char, Display::Digit) [clone .constprop.5]>
loop():
C:\Users\dawid\Desktop\8bit\ioreader\code/code.ino:67
void loop() 
{
  valueToDisplay = input.readInput();
  hexDisplay.displayNumber(valueToDisplay);

  delay(REFRESH_DELAY);
 528:	65 e0       	ldi	r22, 0x05	; 5
 52a:	70 e0       	ldi	r23, 0x00	; 0
 52c:	80 e0       	ldi	r24, 0x00	; 0
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	0e 94 0b 01 	call	0x216	; 0x216 <delay>
main():
C:\Users\dawid\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/main.cpp:47
 534:	c1 14       	cp	r12, r1
 536:	d1 04       	cpc	r13, r1
 538:	51 f2       	breq	.-108    	; 0x4ce <__stack+0x6f>
 53a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 53e:	c7 cf       	rjmp	.-114    	; 0x4ce <__stack+0x6f>

00000540 <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
 540:	f8 94       	cli

00000542 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
 542:	ff cf       	rjmp	.-2      	; 0x542 <__stop_program>
